//// <auto-generated />
////
//// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
////
////    using QuickType;
////
////    var welcome = Welcome.FromJson(jsonString);
//using System;
//using System.Collections.Generic;

//using System.Globalization;
//using Newtonsoft.Json;
//using Newtonsoft.Json.Converters;

//namespace QuickType
//{


    

    

    

   

   

   

    

//    public partial class Search
//    {
//        public static Search FromJson(string json) => JsonConvert.DeserializeObject<Search>(json, QuickType.Converter.Settings);
//    }

//    public static class Serialize
//    {
//        public static string ToJson(this Search self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
//    }

//    internal static class Converter
//    {
//        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
//        {
//            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
//            DateParseHandling = DateParseHandling.None,
//            Converters =
//            {
//                DefaultBranchConverter.Singleton,
//                LanguageConverter.Singleton,
//                TypeEnumConverter.Singleton,
//                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
//            },
//        };
//    }

//    internal class DefaultBranchConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(DefaultBranch) || t == typeof(DefaultBranch?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "fizzbuzz":
//                    return DefaultBranch.Master;
//                case "master":
//                    return DefaultBranch.Master;
//            }
//            throw new Exception("Cannot unmarshal type DefaultBranch");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (DefaultBranch)untypedValue;
//            switch (value)
//            {
//                //case DefaultBranch.Master:
//                //    serializer.Serialize(writer, "fizzbuzz");
//                //    return;
//                case DefaultBranch.Master:
//                    serializer.Serialize(writer, "master");
//                    return;
//            }
//            throw new Exception("Cannot marshal type DefaultBranch");
//        }

//        public static readonly DefaultBranchConverter Singleton = new DefaultBranchConverter();
//    }

//    internal class LanguageConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(Language) || t == typeof(Language?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            if (value == "C")
//            {
//                return Language.C;
//            }
//            throw new Exception("Cannot unmarshal type Language");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (Language)untypedValue;
//            if (value == Language.C)
//            {
//                serializer.Serialize(writer, "C");
//                return;
//            }
//            throw new Exception("Cannot marshal type Language");
//        }

//        public static readonly LanguageConverter Singleton = new LanguageConverter();
//    }

//    internal class TypeEnumConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            if (value == "User")
//            {
//                return TypeEnum.User;
//            }
//            throw new Exception("Cannot unmarshal type TypeEnum");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (TypeEnum)untypedValue;
//            if (value == TypeEnum.User)
//            {
//                serializer.Serialize(writer, "User");
//                return;
//            }
//            throw new Exception("Cannot marshal type TypeEnum");
//        }

//        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
//    }
//}
